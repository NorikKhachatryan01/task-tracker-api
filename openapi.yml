openapi: 3.0.3
info:
  title: Task Tracker API
  description: API for managing projects and tasks in the Task Tracker application.
  version: 1.0.0
  contact:
    name: xAI Support
    email: support@xai.com

servers:
  - url: http://localhost:8080
    description: Local development server

paths:
  /projects:
    get:
      summary: Retrieve all projects
      operationId: getAllProjects
      responses:
        '200':
          description: List of all projects
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Project'
    post:
      summary: Create a new project
      operationId: createProject
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectInput'
      responses:
        '201':
          description: Project created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
        '400':
          description: Invalid project data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /projects/{projectId}:
    get:
      summary: Retrieve a project by ID
      operationId: getProjectById
      parameters:
        - name: projectId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Project details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
        '404':
          description: Project not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      summary: Update a project
      operationId: updateProject
      parameters:
        - name: projectId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectInput'
      responses:
        '200':
          description: Project updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
        '404':
          description: Project not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete a project
      operationId: deleteProject
      parameters:
        - name: projectId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: Project deleted successfully
        '404':
          description: Project not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /projects/{projectId}/tasks:
    get:
      summary: Retrieve all tasks for a project
      operationId: getTasksByProjectId
      parameters:
        - name: projectId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: List of tasks for the project
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Task'
        '404':
          description: Project not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Add a new task to a project
      operationId: createTaskForProject
      parameters:
        - name: projectId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskInput'
      responses:
        '201':
          description: Task created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        '400':
          description: Invalid task data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Project not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /tasks/{taskId}:
    get:
      summary: Retrieve a task by ID
      operationId: getTaskById
      parameters:
        - name: taskId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Task details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        '404':
          description: Task not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      summary: Update a task
      operationId: updateTask
      parameters:
        - name: taskId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskInput'
      responses:
        '200':
          description: Task updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        '404':
          description: Task not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete a task
      operationId: deleteTask
      parameters:
        - name: taskId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: Task deleted successfully
        '404':
          description: Task not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

components:
  schemas:
    Project:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          example: "Website Redesign"
        tasks:
          type: array
          items:
            $ref: '#/components/schemas/Task'
        version:
          type: integer
          format: int64
          example: 0
      required:
        - name

    ProjectInput:
      type: object
      properties:
        name:
          type: string
          example: "Website Redesign"
        tasks:
          type: array
          items:
            $ref: '#/components/schemas/TaskInput'
      required:
        - name

    Task:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        title:
          type: string
          example: "Design Homepage"
        status:
          type: string
          enum: [TODO, IN_PROGRESS, DONE, BLOCKED]
          example: "TODO"
        project:
          $ref: '#/components/schemas/Project'
        version:
          type: integer
          format: int64
          example: 0
      required:
        - title
        - status

    TaskInput:
      type: object
      properties:
        title:
          type: string
          example: "Design Homepage"
        status:
          type: string
          enum: [TODO, IN_PROGRESS, DONE, BLOCKED]
          example: "TODO"
      required:
        - title
        - status

    Error:
      type: object
      properties:
        message:
          type: string
          example: "Resource not found"
        code:
          type: string
          example: "404"
      required:
        - message
        - code